using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Microsoft.Win32;
using iTextSharp;
using iTextSharp.text.pdf;
using iTextSharp.text.pdf.parser;
using Parse;
using System.Windows.Threading;
using System.Windows.Media.Animation;

namespace RiceSeedParser
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// 
    /// The MainWindow class is responsible for handling the multiple interactions that occur on this window.
    /// While a bit disoragnized, the code here gives the window the appearance of having pages.
    /// </summary>
    public partial class MainWindow : Window
    {
        // The Collection of Cultivars that are generated by the PDF and prepared for upload. 
        ObservableCollection<Cultivar> Cultivars = new ObservableCollection<Cultivar>();

        public MainWindow()
        {
            InitializeComponent();

            // This timer hides the inital logo after 2 seconds. After the tick,
            // the timer is stopped and the logo's opacity is animated to 0.
            var timer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(2) };
            timer.Tick += delegate
            {
                timer.Stop();
                // Animate logo opacity to 0
                DoubleAnimation da = new DoubleAnimation();
                da.From = 1;
                da.To = 0;
                da.Duration = new Duration(TimeSpan.FromSeconds(1));
                logoImage.BeginAnimation(OpacityProperty, da);

                // Timer for animating the opacity of the "initial pdf selection page"
                // This includes the prompt label, the url input textbox, the "Confirm URL" button, 
                // the choose PDF button, and the dock panel that holds the top menu.
                var timer2 = new DispatcherTimer { Interval = TimeSpan.FromSeconds(1) };
                timer2.Tick += delegate
                {
                    logoImage.Visibility = Visibility.Hidden;
                    dockPanel.Visibility = Visibility.Visible;

                    timer2.Stop();
                    DoubleAnimation da2 = new DoubleAnimation();
                    da2.From = 0;
                    da2.To = 1;
                    da2.Duration = new Duration(TimeSpan.FromSeconds(1));

                    btnOpen.BeginAnimation(OpacityProperty, da2);
                    lblUrl.BeginAnimation(OpacityProperty, da2);
                    txtURL.BeginAnimation(OpacityProperty, da2);
                    btnURL.BeginAnimation(OpacityProperty, da2);
                    dockPanel.BeginAnimation(OpacityProperty, da2);
                };
                timer2.Start();
            };
            timer.Start();
        }

        /*
         * Attempts to parse a PDF selected by the user on the file system. Calls "ContinueUpdate()" after
         * a successful parse.
         */
        private void btnOpen_Click(object sender, RoutedEventArgs e)
        {
            // The open file dialog to let the user select their pdf file.
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
            dialog.Filter = "Pdf Files|*.pdf";

            if (dialog.ShowDialog() == true)
            {
                StringBuilder text = new StringBuilder();

                try
                {
                    // Using the iTextSharp library, we extract the text from the PDF and save it to a StringBuilder
                    PdfReader pdfReader = new PdfReader(dialog.FileName);

                    for (int page = 1; page <= pdfReader.NumberOfPages; page++)
                    {
                        ITextExtractionStrategy strategy = new SimpleTextExtractionStrategy();
                        string currentText = PdfTextExtractor.GetTextFromPage(pdfReader, page, strategy);

                        currentText = Encoding.UTF8.GetString(ASCIIEncoding.Convert(Encoding.Default, Encoding.UTF8, Encoding.Default.GetBytes(currentText)));
                        text.Append(currentText);
                    }
                    pdfReader.Close();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Something is wrong with the file you have uploaded. Please choose a different file.", "Invalid File.");
                    return;
                }
                // If this point is reached, extraction was successful and the program will continue with the extracted text.
                ContinueUpdate(text);
            }
        }

        /**
         * This method attempts to extract text from a pdf retrieved at the URL typed in "txtURL".
         * If text was extracted successfully the "ContinueUpdate()" method is called with the extracted text
         */
        private void btnURL_Click(object sender, RoutedEventArgs e)
        {
            // Checks for an empty URL input
            if (txtURL.Text.Equals(""))
            {
                return;
            }
            StringBuilder text = new StringBuilder();

            try
            {
                // Checks if the URL starts with the essential "http://" or not.
                string url = txtURL.Text;
                if (!url.ToLower().StartsWith("http://"))
                {
                    url = "http://" + url;
                }
                // Downloads the PDF and creates a PdfReader object
                Uri uri = new Uri(url);
                PdfReader pdfReader = new PdfReader(uri);

                // Extracts text
                for (int page = 1; page <= pdfReader.NumberOfPages; page++)
                {
                    ITextExtractionStrategy strategy = new SimpleTextExtractionStrategy();
                    string currentText = PdfTextExtractor.GetTextFromPage(pdfReader, page, strategy);

                    currentText = Encoding.UTF8.GetString(ASCIIEncoding.Convert(Encoding.Default, Encoding.UTF8, Encoding.Default.GetBytes(currentText)));
                    text.Append(currentText);
                }
                pdfReader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Invalid URL or PDF. Make sure the URL you typed is correct.", "Invalid URL");
                return;
            }
            // If this point has been reached, then the program attempts to conitnue the Update process
            ContinueUpdate(text);
        }

        /*
         * Hides the "Choose PDF" interface and loads the data selection interface.
         * Strings are displayed in a list, and the user selects the beginning of the chart data.
         */
        public void ContinueUpdate(StringBuilder text)
        {
            btnOpen.Visibility = Visibility.Hidden;
            lblUrl.Visibility = Visibility.Hidden;
            txtURL.Visibility = Visibility.Hidden;
            btnURL.Visibility = Visibility.Hidden;
            listLabel.Visibility = Visibility.Visible;
            string[] input = text.ToString().Split('\n');

            List<string> listInput = input.ToList();
            listSelectRows.ItemsSource = listInput;
            listSelectRows.Visibility = Visibility.Visible;

            listLabel.Content = "Select the START of the chart data:";

            listSelectRows.SelectionChanged += delegate
            {
                // When data is selected, show the "Confirm" button to attempt moving to the next step.
                if (listSelectRows.SelectedIndex >= 0)
                {
                    confirmButton.Visibility = Visibility.Visible;
                }
            };

            // If the confirm button is clicked, grab every element after and including the selected element.
            // Attempt to create objects from every line. If some objects were created, but an error was reached at some point,
            // then we assume that is the end of the data and we use that data for upload.
            confirmButton.Click += delegate
            {
                List<string> finalList = listInput.GetRange(listSelectRows.SelectedIndex, listInput.Count - listSelectRows.SelectedIndex);

                int i = 0;
                try
                {
                    // Begins parsing data for Cultivar Objects from the strings in finalList
                    while (i < finalList.Count)
                    {
                        // Remove all commas from the text (these appear in numbers and make it hard to parse)
                        string inString = finalList.ElementAt(i).Trim().Replace(",", "");
    
                        // If the firt character of this string is a number, skip it, it's not in a valid format                    
                        if (char.IsDigit(inString.ElementAt(0)))
                        {
                            i++;
                            continue;
                        }
                        
                        // Sometimes cultivar names get separated by a newline. If this is the case, we need to check if the
                        // rest of the information is found on the next line for this cultivar.
                        // Basically, if the next line starts with a number, we know it's information goes with the current line
                        if (i < finalList.Count - 1)    // checks if there is a string after this
                        {
                            // gets next string, removes end spaces and commas 
                            string nextString = finalList.ElementAt(i + 1).Trim().Replace(",", "");


                            // if the next string starts with a number, use its information with current string as the cultivar name
                            if (char.IsDigit(nextString.ElementAt(0)) && nextString.Split(' ').Length > 5)
                            {
                                Cultivar c = new Cultivar(inString, nextString);
                                Cultivars.Add(c);
                            }
                            else {    // next string didn't go along with the current string, continue with only current string
                                string[] separation = SplitNameAndNumbers(inString);
                                Cultivar c = new Cultivar(separation[0], separation[1]);
                                Cultivars.Add(c);
                            }
                        }
                        else    // this must be the last string in the loop to reach this statement
                        {    
                            string[] separation = SplitNameAndNumbers(inString);
                            Cultivar c = new Cultivar(separation[0], separation[1]);
                            Cultivars.Add(c);
                        }

                        i++;
                    }
                }
                catch (Exception ex)
                {
                    if (Cultivars.Count == 0)   // No cultivars were created
                    {
                        MessageBox.Show("Invalid data was selected. Please try again.", "Invalid Data");
                        listSelectRows.SelectedIndex = -1;    // deselect rows
                        confirmButton.Visibility = Visibility.Hidden;    // hide confirm button
                        listLabel.Content = "Select the START of the chart data:";
                        return;
                    }
                }


                // If this point has been reached, one or more cultivars were created successfully.
                dataControl.ItemsSource = Cultivars;


                // Hides the data selection interface
                listLabel.Visibility = Visibility.Hidden;
                confirmButton.Visibility = Visibility.Hidden;
                listSelectRows.Visibility = Visibility.Hidden;

                // Displays the upload interface
                btnSave.Visibility = Visibility.Visible;
                dataControl.Visibility = Visibility.Visible;

            };
        }

        /**
         * When the save button is clicked, all old data should be deleted from Parse, while all new data should be uploaded. 
         */
        private async void btnSave_Click(object sender, RoutedEventArgs e)
        {
            int current = 1;

            btnSave.IsEnabled = false;

            // Delete old data
            var query = new ParseQuery<Cultivar>();
            query = query.Limit(1000);    // Parse default fetch limit is 100, this makes sure we get all the data
            List<Cultivar> list = (await query.FindAsync()).ToList();

            foreach (Cultivar cult in list)    // iterates through each Cultivar and calls "DeleteAsync()"
            {
                btnSave.Content = "Deleting " + current++ + " of " + Cultivars.Count;
                await cult.DeleteAsync();
            }

            // Save all new data
            btnSave.Content = "Saving " + Cultivars.Count + " objects";
            await ParseObject.SaveAllAsync(Cultivars);

            btnSave.Content = "Save All Data";
        }

        // Method for separating the name of a cultivar from its list of numbers given a single string (returns two strings in an array)
        private string[] SplitNameAndNumbers(string input)
        {
            string[] output = new string[2];
            // default values
            output[0] = input;
            output[1] = "";


            // iterate through all chars except the last. We are looking for a combination of a space and a number as the 
            // split point. For example, "Test Cultivar Name 23 43 25 34" would be split into "Test Cultivar Name" and "23 43 25 
            for (int i = 0; i < input.Length - 2; i++)
            {
                if (char.IsSeparator(input, i) && char.IsDigit(input, i + 1))
                {
                    output[0] = input.Substring(0, i);
                    output[1] = input.Substring(i + 1);
                    break;
                }
            }

            return output;
        }

        /*
         * Adds numbers to the beginning of each row.
         */
        private void dataControl_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            e.Row.Header = (e.Row.GetIndex() + 1).ToString();
        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            // "Start Over" button - Closes this window and opens a new instance.
            MainWindow newWindow = new MainWindow();
            this.Close();
            newWindow.Show();
        }

        private void MenuItem_Click_1(object sender, RoutedEventArgs e)
        {
            // "Close" Button - Closes this window
            this.Close();
        }

        private void MenuItem_Click_2(object sender, RoutedEventArgs e)
        {
            // "Help" Button - Opens the PDF to the user guide online
            System.Diagnostics.Process.Start("http://riceadvisor.parseapp.com/dbmanager/userguide.pdf");
        }


        private void MenuItem_Click_3(object sender, RoutedEventArgs e)
        {
            // "Existing data" window - shows all data currently on Parse.
            ExistingDataWindow window = new ExistingDataWindow();
            window.Show();
        }
    }
}
